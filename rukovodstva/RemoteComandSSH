Как выполнить команды Linux на удаленной системе через SSH

обзор

Много раз нам нужно работать с удаленными системами Linux. Мы подключаемся к удаленному хосту, выполняем работу и завершаем эту сессию. Можем ли мы выполнить все эти действия с локальной машины? Да, это возможно, и этот урок демонстрирует это с исчерпывающими примерами.

Выполнение команды по SSH

SSH позволяет нам выполнять команды на удаленном компьютере без входа в систему. В этом уроке мы обсудим различные способы достижения этого.

Выполнить одну команду

Давайте выполним команду uname через SSH.

$ ssh linuxtechi@192.168.10.10 uname

Если вы наблюдаете вышеупомянутую команду, она похожа на обычную команду SSH с небольшим отличием. Мы добавили команду для выполнения (uname).

Когда мы выполним эту команду. Будет сгенерировано вывод:

Linux

Выполнить несколько команд

Используя эту технику, мы можем выполнить несколько команд, используя один сеанс SSH. Нам просто нужно разделить команды точкой с запятой (;).

$ ssh linuxtechi@192.168.10.10 "uname;hostname;date"

Как и ожидалось, эти команды будут генерировать вывод:

Linux
linux-server
Thu Mar  1 15:47:59 IST 2018

Execute command with elevated privileges

Иногда нам нужно выполнить команду с повышенными привилегиями, в этом случае мы можем использовать ее с sudo.

$ ssh -t linuxtechi@192.168.10.10 sudo touch /etc/banner.txt

Обратите внимание, что мы использовали опцию ‘-t‘ с SSH, которая позволяет псевдо-терминальное распределение. Команда sudo требует интерактивного терминала, поэтому эта опция необходима.

Выполнить скрипт

Удаленное выполнение не ограничивается только командами; мы даже можем выполнить скрипт через SSH. Нам просто нужно указать абсолютный путь локального скрипта к команде SSH.

Давайте создадим простой сценарий оболочки со следующим содержимым и назовем его system-info.sh

#!/bin/sh
uname
hostname

Сделайте скрипт исполняемым и запустите его на удаленном сервере следующим образом:

$ chmod +x system-info.sh
$ ssh linuxtechi@192.168.10.10 ./system-info.sh

Как некоторые из вас могли догадаться, это сгенерирует вывод:

Linux
linux-server

Проблема расширения переменной

Если мы разделим команды на несколько строк, расширение переменных не будет работать. Давайте посмотрим на простой пример:
$ msg="Hello LinuxTechi"
$ ssh linuxtechi@192.168.10.10 'echo $msg'

Когда мы выполняем вышеуказанную команду, мы можем наблюдать, что переменная не расширяется.

Чтобы решить эту проблему, нам нужно использовать параметр оболочки -c. В нашем случае мы будем использовать его с bash следующим образом:

$ ssh linuxtechi@192.168.10.10 bash -c "'echo $msg'"

Настроить сеанс SSH без пароля

По умолчанию SSH будет запрашивать пароль каждый раз. Это применяется по соображениям безопасности. Однако иногда это раздражает. Чтобы преодолеть это, мы можем использовать механизм аутентификации с использованием открытого и закрытого ключей.

Это можно настроить с помощью следующих шагов:

1) Генерация пары открытый-закрытый ключ

SSH предоставляет утилиту ssh-keygen, которую можно использовать для генерации пар ключей на локальном компьютере.

$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/linuxtechi/.ssh/id_rsa): #press enter
Enter passphrase (empty for no passphrase):                         #press enter
Enter same passphrase again:                                        #press enter
Your identification has been saved in /home/linuxtechi/.ssh/id_rsa.
Your public key has been saved in /home/linuxtechi/.ssh/id_rsa.pub.

Выше вывод показывает, что сгенерированные пары ключей хранятся в ~/.ssh directory.

2)  Добавить открытый ключ в файл ~/.ssh/authorized_keys на удаленном хосте

Простой способ сделать это, используя команду ssh-copy-id.

$ ssh-copy-id -i ~/.ssh/id_rsa.pub linuxtechi@192.168.10.10

В вышеуказанной команде:

    -i опция указывает на файл идентификации
    ~/.ssh/id_rsa.pub это личный файл
    оставшийся текст - IP удаленного пользователя и удаленного сервера

ПРИМЕЧАНИЕ. Никогда не передавайте свой закрытый ключ кому-либо.

3) Это оно. Разве это не так просто? Теперь мы можем выполнить команду через SSH без ввода пароля. Давайте проверим это.

$ ssh linuxtechi@192.168.10.10 uname

Ограничение аутентификации публично-приватного ключа

Мысль с использованием открытого и закрытого ключей делает нашу жизнь проще, она не идеальна. Его основным недостатком является; мы не можем автоматизировать это, потому что требуется взаимодействие с пользователем в начале. Помните !!! мы предоставили пароль для команды ssh-copy-id.

Не нужно паниковать, это не конец света. В следующем разделе мы обсудим подход, который устраняет это ограничение.
sshpass utility

Чтобы преодолеть вышеуказанное ограничение, мы можем использовать утилиту sshpass. Она предоставляет неинтерактивный способ аутентификации сеанса SSH. В этом разделе обсуждаются различные способы достигнуть этого.
Установка sshpass

Утилита sshpass является частью официального репозитория Ubuntu. Мы можем установить его с помощью следующих команд:

$ sudo apt-get update
$ sudo apt-get install sshpass

Примеры

sshpass может принять пароль - в качестве аргумента, прочитать его из файла или через переменную окружения. Давайте обсудим все эти подходы.

1) Пароль в качестве аргумента

Мы можем предоставить пароль в качестве аргумента, используя опцию –p:

$ sshpass -p 'secrete-password' ssh linuxtechi@192.168.10.10 uname

2) Пароль из файла

sshpass может прочитать пароль из обычного файла, используя опцию -f:

$ echo "secrete-password" > password-file
$ sshpass -f password-file ssh linuxtechi@192.168.10.10 uname

3) Пароль из переменной среды

В дополнение к этому, мы можем предоставить пароль из переменной окружения, используя опцию -e:

$ export SSHPASS="secrete-password"
$ sshpass -e ssh linuxtechi@192.168.10.10 uname

Заключение

В этом руководстве показаны различные приемы и советы по удаленному выполнению команд через SSH. Когда вы поймете эти трюки, это значительно облегчит вашу жизнь и определенно повысит вашу производительность.
