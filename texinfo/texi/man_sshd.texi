@node SSHD, SSH_CONFIG, SSH, Top
@chapter SSHD 
@table @asis
@item NAME
     sshd — OpenSSH SSH демон

@item SYNOPSIS
     sshd [-@ref{man_ssh_sshd 4,, 4}@ref{man_ssh_sshd 6,, 6}@ref{man_ssh_sshd D,, D}@ref{man_ssh_sshd d,, d}@ref{man_ssh_sshd e,, e}@ref{man_ssh_sshd i,, i}@ref{man_ssh_sshd q,, q}@ref{man_ssh_sshd T,, T}@ref{man_ssh_sshd t,, t}] [@ref{man_ssh_sshd -b bits,, -b bits}] [@ref{man_ssh_sshd -C connection_spec,, -C connection_spec}]
          [@ref{man_ssh_sshd -c host_certificate_file,, -c host_certificate_file}] [@ref{man_ssh_sshd -E log_file,, -E log_file}] [@ref{man_ssh_sshd -f config_file,, -f config_file}]
          [@ref{man_ssh_sshd -g login_grace_time,, -g login_grace_time}] [@ref{man_ssh_sshd -h host_key_file,, -h host_key_file}] [@ref{man_ssh_sshd -k key_gen_time,, -k key_gen_time}]
          [@ref{man_ssh_sshd -o option,, -o option}] [@ref{man_ssh_sshd -p port,, -p port}] [@ref{man_ssh_sshd -u len,, -u len}]
@item Ключевые слова файла аунтификации
@display
     @ref{man_ssh_sshd_auth_file agent-forwarding,, agent-forwarding}
     @ref{man_ssh_sshd_auth_file cert-authority,, cert-authority}
     @ref{man_ssh_sshd_auth_file command="command",, command="command"}
     @ref{man_ssh_sshd_auth_file environment="NAME=value",, environment="NAME=value"}
     @ref{man_ssh_sshd_auth_file from="pattern-list",, from="pattern-list"}
     @ref{man_ssh_sshd_auth_file no-agent-forwarding,, no-agent-forwarding}
     @ref{man_ssh_sshd_auth_file no-port-forwarding,, no-port-forwarding}
     @ref{man_ssh_sshd_auth_file no-pty,, no-pty}
     @ref{man_ssh_sshd_auth_file no-user-rc,, no-user-rc}
     @ref{man_ssh_sshd_auth_file no-X11-forwarding,, no-X11-forwarding}
     @ref{man_ssh_sshd_auth_file permitopen="host:port",, permitopen="host:port"}
     @ref{man_ssh_sshd_auth_file port-forwarding,, port-forwarding}
     @ref{man_ssh_sshd_auth_file principals="principals",, principals="principals"}
     @ref{man_ssh_sshd_auth_file pty,, pty}
     @ref{man_ssh_sshd_auth_file restrict,, restrict}
     @ref{man_ssh_sshd_auth_file tunnel="n",, tunnel="n"}
     @ref{man_ssh_sshd_auth_file user-rc,, user-rc}
     @ref{man_ssh_sshd_auth_file X11-forwarding,, X11-forwarding}
@end display
@item Список Файлов
@display
     @ref{man_ssh_sshd_file ~/.hushlogin,, ~/.hushlogin}
     @ref{man_ssh_sshd_file ~/.rhosts,, ~/.rhosts}
     @ref{man_ssh_sshd_file ~/.shosts,, ~/.shosts}
     @ref{man_ssh_sshd_file ~/.ssh/,, ~/.ssh/}
     @ref{man_ssh_sshd_file ~/.ssh/authorized_keys,, ~/.ssh/authorized_keys}
     @ref{man_ssh_sshd_file ~/.ssh/environment,, ~/.ssh/environment}
     @ref{man_ssh_sshd_file ~/.ssh/known_hosts,, ~/.ssh/known_hosts}
     @ref{man_ssh_sshd_file ~/.ssh/rc,, ~/.ssh/rc}
     @ref{man_ssh_sshd_file /etc/hosts.allow  /etc/hosts.deny,, /etc/hosts.allow  /etc/hosts.deny}
     @ref{man_ssh_sshd_file /etc/hosts.equiv,, /etc/hosts.equiv}
     @ref{man_ssh_sshd_file /etc/ssh/moduli,, /etc/ssh/moduli}
     @ref{man_ssh_sshd_file /etc/motd,, /etc/motd}
     @ref{man_ssh_sshd_file /etc/nologin,, /etc/nologin}
     @ref{man_ssh_sshd_file /etc/ssh/shosts.equiv,, /etc/ssh/shosts.equiv}
     @ref{man_ssh_sshd_file Приватные части ключей хоста,, /etc/ssh/ssh_host_key}
     @ref{man_ssh_sshd_file Приватные части ключей хоста,, /etc/ssh/ssh_host_dsa_key}
     @ref{man_ssh_sshd_file Приватные части ключей хоста,, /etc/ssh/ssh_host_ecdsa_key}
     @ref{man_ssh_sshd_file Приватные части ключей хоста,, /etc/ssh/ssh_host_ed25519_key}
     @ref{man_ssh_sshd_file Приватные части ключей хоста,, /etc/ssh/ssh_host_rsa_key}
     @ref{man_ssh_sshd_file Открытые части ключей хоста,, /etc/ssh/ssh_host_key.pub}
     @ref{man_ssh_sshd_file Открытые части ключей хоста,, /etc/ssh/ssh_host_dsa_key.pub}
     @ref{man_ssh_sshd_file Открытые части ключей хоста,, /etc/ssh/ssh_host_ecdsa_key.pub}
     @ref{man_ssh_sshd_file Открытые части ключей хоста,, /etc/ssh/ssh_host_ed25519_key.pub}
     @ref{man_ssh_sshd_file Открытые части ключей хоста,, /etc/ssh/ssh_host_rsa_key.pub}
     @ref{man_ssh_sshd_file /etc/ssh/ssh_known_hosts,, /etc/ssh/ssh_known_hosts}
     @ref{man_ssh_sshd_file /etc/ssh/sshd_config,, /etc/ssh/sshd_config}
     @ref{man_ssh_sshd_file /etc/ssh/sshrc,, /etc/ssh/sshrc}
     @ref{man_ssh_sshd_file /var/run/sshd,, /var/run/sshd}
     @ref{man_ssh_sshd_file /var/run/sshd.pid,, /var/run/sshd.pid}
     
@end display
@item DESCRIPTION
     sshd (OpenSSH Daemon) - это программа-демон для ssh(1). Вместе эти программы заменяют
     rlogin и rsh и обеспечивают безопасную зашифрованную связь между двумя ненадежными
     хостами по небезопасной сети.

     sshd прослушивает соединения от клиентов. Обычно он запускается при загрузке с
     /etc/init.d/ssh (или /etc/init/ssh.conf в системах, использующих демон инициализации
     Upstart). Он создает новый демон для каждого входящего соединения. Разветвленные
     демоны управляют обменом ключами, шифрованием, аутентификацией, выполнением команд и
     обменом данными.

     sshd может быть настроен с использованием параметров командной строки или файла
     конфигурации (по умолчанию sshd_config(5)); параметры командной строки переопределяют
     значения, указанные в файле конфигурации. sshd перечитывает свой файл конфигурации,
     когда он получает сигнал зависания, SIGHUP, выполняя себя с именем и параметрами, с
     которыми он был запущен, например, /usr/sbin/sshd.

     Варианты следующие:
@table @asis
@item     -4 @anchor{man_ssh_sshd 4}
             Заставляет sshd использовать только адреса IPv4.

@item     -6 @anchor{man_ssh_sshd 6}
             Заставляет sshd использовать только адреса IPv6.

@item     -b bits @anchor{man_ssh_sshd -b bits}
             Определяет количество бит в ключе сервера эфемерного протокола версии 1
             (по умолчанию 1024).

@item     -C connection_spec @anchor{man_ssh_sshd -C connection_spec}
             Укажите параметры подключения для использования в расширенном тестовом
             режиме -T. Если предусмотрено, любые директивы Match в файле конфигурации,
             которые будут применяться к указанному пользователю, хосту и адресу, будут
             установлены до того, как конфигурация будет записана в стандартный вывод.
             Параметры подключения поставляются в виде пар keyword=value
             (ключевоеСлово=значение). Ключевые слова - “user”, “host”, “laddr”,
             “lport”, и “addr”. Все они обязательны и могут поставляться в любом порядке,
             с несколькими опциями -C или в виде списка через запятую.

@item     -c host_certificate_file @anchor{man_ssh_sshd -c host_certificate_file}
             Указывает путь к файлу сертификата для идентификации sshd во время обмена
             ключами. Файл сертификата должен соответствовать файлу ключа хоста, указанному
             с помощью опции -h или директивы конфигурации HostKey.

@item     -D @anchor{man_ssh_sshd D}
             Если указан этот параметр, sshd не будет отключаться и не станет демоном. Это
             позволяет легко контролировать sshd.

@item     -d @anchor{man_ssh_sshd d}
             Режим отладки. Сервер отправляет подробный отладочный вывод со стандартной
             ошибкой и не помещает себя в фоновый режим. Сервер также не будет
             разветвляться и будет обрабатывать только одно соединение. Эта опция
             предназначена только для отладки на сервере. Несколько опций -d повышают
             уровень отладки. Максимум 3.

@item     -E log_file @anchor{man_ssh_sshd -E log_file}
             Добавьте журналы отладки в log_file вместо системного журнала.

@item     -e @anchor{man_ssh_sshd e}
             Записывать журналы отладки в стандартную ошибку вместо системного журнала.

@item     -f config_file @anchor{man_ssh_sshd -f config_file}
             Определяет имя файла конфигурации. По умолчанию используется
             /etc/ssh/sshd_config. sshd отказывается запускаться, если нет
             файла конфигурации.

@item     -g login_grace_time @anchor{man_ssh_sshd -g login_grace_time}
             Предоставляет льготное время для аутентификации клиентов (по умолчанию 120
             секунд). Если клиенту не удается аутентифицировать пользователя в течение
             этих нескольких секунд, сервер отключается и завершает работу. Нулевое
             значение указывает на отсутствие ограничений.

@item     -h host_key_file @anchor{man_ssh_sshd -h host_key_file}
             Указывает файл, из которого читается ключ хоста. Эта опция должна быть
             указана, если sshd не запускается от имени пользователя root (поскольку
             обычные файлы ключей хоста обычно не читаются никем, кроме root). По умолчанию
             используется /etc/ssh/ssh_host_key для версии протокола 1 и
             /etc/ssh/ssh_host_dsa_key, /etc/ssh/ssh_host_ecdsa_key.
             /etc/ssh/ssh_host_ed25519_key и /etc/ssh/ssh_host_rsa_key для протокола
             версии 2. Можно иметь несколько файлов ключей хоста для разных версий
             протокола и алгоритмов ключей хоста.

@item     -i @anchor{man_ssh_sshd i}
             Указывает, что sshd запускается из inetd(8). Если протокол SSH 1 включен,
             sshd обычно не следует запускать из inetd, потому что ему нужно сгенерировать
             ключ сервера, прежде чем он сможет ответить клиенту, а это может занять
             некоторое время. Клиентам, возможно, придется ждать слишком долго, если ключ
             был обновлен каждый раз.

@item     -k key_gen_time @anchor{man_ssh_sshd -k key_gen_time}
             Указывает, как часто регенерируется ключ сервера эфемерного протокола
             версии 1 (по умолчанию 3600 секунд или один час). Мотивация для регенерации
             ключа довольно часто заключается в том, что ключ нигде не хранится, и примерно
             через час становится невозможным восстановить ключ для расшифровки
             перехваченных сообщений, даже если машина взломана или физически захвачена.
             Нулевое значение указывает, что ключ никогда не будет восстановлен.

@item     -o option @anchor{man_ssh_sshd -o option}
             Может использоваться для задания параметров в формате, используемом в файле
             конфигурации. Это полезно для указания параметров, для которых нет отдельного
             флага командной строки. Для получения полной информации о параметрах и их
             значениях, смотри sshd_config(5).

@item     -p port @anchor{man_ssh_sshd -p port}
             Указывает порт, на котором сервер прослушивает соединения (по умолчанию 22).
             Допускается использование нескольких портов. Порты, указанные в файле
             конфигурации с параметром Port, игнорируются, если указан порт командной
             строки. Порты, указанные с помощью опции ListenAddress, переопределяют порты
             командной строки.

@item     -q @anchor{man_ssh_sshd q}
             Бесшумный режим. Ничего не отправляется в системный журнал. Обычно начало,
             аутентификация и завершение каждого соединения регистрируются.

@item     -T @anchor{man_ssh_sshd T}
             Расширенный тестовый режим. Проверьте правильность файла конфигурации,
             выведите действующую конфигурацию в стандартный вывод и затем выйдите.
             Опционально, правила соответствия могут применяться путем указания параметров
             соединения с использованием одного или нескольких параметров -C.

@item     -t @anchor{man_ssh_sshd t}
             Тестовый режим. Только проверяйте действительность файла конфигурации и
             работоспособность ключей. Это полезно для надежного обновления sshd,
             поскольку параметры конфигурации могут измениться.

@item     -u len @anchor{man_ssh_sshd -u len}
             Эта опция используется для указания размера поля в структуре utmp, которая
             содержит имя удаленного хоста. Если разрешенное имя хоста длиннее len, вместо
             него будет использоваться десятичное значение с точками. Это позволяет узлам
             с очень длинными именами узлов, выходящими за пределы этого поля, по-прежнему
             идентифицироваться однозначно. Указание -u0 указывает, что в файл utmp следует
             помещать только десятичные адреса с точками. -u0 также можно использовать для
             предотвращения выполнения sshd запросов DNS, если этого не требует механизм
             или конфигурация аутентификации. Механизмы аутентификации, для которых может
             потребоваться DNS, включают в себя RhostsRSAAuthentication,
             HostbasedAuthentication и используют опцию from="pattern-list" в файле ключа.
             Параметры конфигурации, для которых требуется DNS, включают использование
             шаблона USER@@HOST в AllowUsers или DenyUsers.
@end table
@item AUTHENTICATION
     OpenSSH SSH-демон поддерживает протоколы SSH 1 и 2. По умолчанию используется только
     протокол 2, хотя это можно изменить с помощью опции Protocol в sshd_config(5).
     Протокол 1 не должен использоваться и предлагается только для поддержки устаревших
     устройств.

     Каждый хост имеет специфичный для хоста ключ, используемый для идентификации хоста.
     Частичная прямая защита для протокола 1 обеспечивается через дополнительный ключ
     сервера, обычно 1024 бита, генерируемый при запуске сервера. Этот ключ обычно
     восстанавливается каждый час, если он использовался, и никогда не сохраняется на
     диске. Каждый раз, когда клиент подключается, демон отвечает своими открытыми ключами
     хоста и сервера. Клиент сравнивает ключ хоста RSA с собственной базой данных, чтобы
     убедиться, что он не изменился. Затем клиент генерирует 256-битное случайное число.
     Он шифрует это случайное число, используя ключ хоста и ключ сервера, и отправляет
     зашифрованное число на сервер. Затем обе стороны используют это случайное число в
     качестве ключа сеанса, который используется для шифрования всех дальнейших сообщений
     в сеансе. Остальная часть сеанса шифруется с использованием обычного шифра, в
     настоящее время Blowfish или 3DES, причем 3DES используется по умолчанию. Клиент
     выбирает используемый алгоритм шифрования из предложенных сервером.

     Для протокола 2 прямая защита обеспечивается посредством соглашения о ключе
     Диффи-Хеллмана. Это ключевое соглашение приводит к общему сеансовому ключу. Остальная
     часть сеанса шифруется с использованием симметричного шифра, в настоящее время
     128-битного AES, Blowfish, 3DES, CAST128, Arcfour, 192-битного AES или 256-битного
     AES. Клиент выбирает используемый алгоритм шифрования из предложенных сервером. Кроме
     того, целостность сеанса обеспечивается посредством криптографического кода
     аутентификации сообщений (hmac-md5, hmac-sha1, umac-64, umac-128, hmac -pymm160,
     hmac-sha2-256 или hmac-sha2-512).

     Наконец, сервер и клиент входят в диалог аутентификации. Клиент пытается
     аутентифицировать себя, используя аутентификацию на основе хоста, аутентификацию
     по публичному ключу, аутентификацию по запросу-запросу или аутентификацию по паролю.

     Независимо от типа аутентификации, учетная запись проверяется, чтобы убедиться, что
     она доступна. Учетная запись недоступна, если она заблокирована, указана в DenyUsers
     или ее группа указана в DenyGroups. Определение заблокированной учетной записи зависит
     от системы. Некоторые платформы имеют свою собственную базу данных учетных записей
     (например, AIX), а некоторые модифицируют поле passwd (‘*LK*’ в Solaris и UnixWare,
     ‘*’ в HP-UX, содержащее ‘Nologin’ в Tru64, ведущее ‘*LOCKED*’ во FreeBSD и ведущее
     ‘!’ в большинстве Linux). Если существует требование отключить проверку подлинности
     по паролю для учетной записи, оставляя открытым публичный ключ, тогда в поле passwd
     должно быть указано что-то отличное от этих значений (например, ‘NP’ или ‘*NP*’).

     Если клиент успешно аутентифицирует себя, вводится диалог для подготовки сеанса. В
     это время клиент может запросить такие вещи, как выделение псевдотерминала, пересылка
     соединений X11, переадресация соединений TCP или переадресация соединения агента
     аутентификации по безопасному каналу.

     После этого клиент либо запрашивает оболочку, либо выполняет команду. Затем стороны
     переходят в режим сеанса. В этом режиме любая сторона может отправлять данные в любое
     время, и такие данные пересылаются в/из оболочки или команды на стороне сервера,
     а пользовательский терминал - на стороне клиента.

     Когда пользовательская программа завершает работу и все переадресованные X11 и другие
     соединения закрываются, сервер отправляет клиенту статус завершения команды, и обе
     стороны завершают работу.

@item LOGIN PROCESS
     Когда пользователь успешно входит в систему, sshd делает следующее:
@display
           1.   Если для входа используется tty, а команда не указана, печатается
                время последнего входа в систему и /etc/motd (если это не запрещено
                в файле конфигурации или с помощью ~/.hushlogin; см. Раздел FILES).

           2.   Если логин на tty, записывает время входа.

           3.   Проверяет /etc/nologin; если он существует, печатает содержимое и
                завершает работу (если не root).

           4.   Изменения для запуска с правами обычного пользователя.

           5.   Устанавливает основную среду.

           6.   Читает файл ~/.ssh/environment, если он существует, и пользователям
                разрешено изменять свою среду. Смотрите параметр PermitUserEnvironment
                в sshd_config(5).

           7.   Изменения в домашнем каталоге пользователя.

           8.   Если ~/.ssh/rc существует и опция sshd_config(5) PermitUserRC установлена,
                она запускается; иначе, если /etc/ssh/sshrc существует, запускает его; в
                противном случае работает xauth. Файлы “rc” получают протокол
                аутентификации X11 и cookie при стандартном вводе. Смотрите SSHRC ниже.

           9.   Запускает пользовательскую оболочку или команду. Все команды выполняются
                в оболочке пользователя, как указано в базе данных системных паролей.
@end display
@item SSHRC
     Если файл ~/.ssh/rc существует, sh(1) запускает его после чтения файлов среды, но до
     запуска оболочки или команды пользователя. Он не должен выдавать никакого вывода на
     стандартный вывод; Вместо этого следует использовать stderr. Если используется
     переадресация X11, она получит пару "proto cookie" на своем стандартном входе (и
     DISPLAY в своей среде). Сценарий должен вызывать xauth(1), потому что sshd не будет
     автоматически запускать xauth для добавления файлов cookie X11.

     Основная цель этого файла - запуск любых процедур инициализации, которые могут
     потребоваться до того, как домашний каталог пользователя станет доступен; AFS
     является частным примером такой среды.

     Этот файл, вероятно, будет содержать некоторый код инициализации, сопровождаемый
     чем-то вроде:
@display
        if read proto cookie && [ -n "$DISPLAY" ]; then
                if [ `echo $DISPLAY | cut -c1-10` = 'localhost:' ]; then
                        # X11UseLocalhost=yes
                        echo add unix:`echo $DISPLAY |
                            cut -c11-` $proto $cookie
                else
                        # X11UseLocalhost=no
                        echo add $DISPLAY $proto $cookie
                fi | xauth -q -
        fi
@end display
     Если этот файл не существует, запускается /etc/ssh/sshrc, и если он также не
     существует, xauth используется для добавления cookie.

@item AUTHORIZED_KEYS FILE FORMAT
     AuthorizedKeysFile указывает файлы, содержащие открытые ключи для аутентификации
     с открытым ключом; если эта опция не указана, по умолчанию используется
     ~/.ssh/authorized_keys и ~/.ssh/authorized_keys2. Каждая строка файла содержит
     один ключ (пустые строки и строки, начинающиеся с ‘#’, игнорируются как комментарии).
     Открытые ключи протокола 1 состоят из следующих разделенных пробелами полей:
     параметры, биты, экспонента, модуль, комментарий. Открытый ключ протокола 2 состоит
     из: параметров, типа ключа, ключа в кодировке base64, комментария. Поле параметров
     является необязательным; его наличие определяется тем, начинается ли строка с цифры
     или нет (поле опций никогда не начинается с цифры). Поля биты, экспонента, модуль и
     комментарий дают ключ RSA для версии протокола 1; поле комментария ни для чего не
     используется (но может быть удобным для пользователя, чтобы идентифицировать ключ).
     Для протокола версии 2 тип ключа - “ecdsa-sha2-nistp256”, “ecdsa-sha2-nistp384”,
     “ecdsa-sha2-nistp521”, “ssh-ed25519”, “ssh-dss” или “ssh-rsa”.

     Обратите внимание, что строки в этом файле обычно имеют длину несколько сотен байтов
     (из-за размера кодировки открытого ключа) до предела 8 килобайт, что позволяет
     использовать ключи DSA до 8 килобит и ключи RSA до 16 килобит. Вы не хотите вводить
     их; вместо этого скопируйте файл identity.pub, id_dsa.pub, id_ecdsa.pub,
     id_ed25519.pub, или id_rsa.pub и отредактируйте его.

     sshd обеспечивает минимальный размер модуля ключа RSA для протоколов 1 и 2 протокола
     длиной 768 бит.

     Опции (если есть) состоят из разделенных запятыми спецификаций опций. Пробелы не
     допускаются, кроме как в двойных кавычках. Поддерживаются следующие спецификации
     параметров (обратите внимание, что ключевые слова параметров учитывают регистр):
@table @asis
@item     agent-forwarding @anchor{man_ssh_sshd_auth_file agent-forwarding}
             Включите переадресацию агента аутентификации, ранее отключенную
             параметром restrict.

@item     cert-authority @anchor{man_ssh_sshd_auth_file cert-authority}
             Указывает, что указанный ключ является центром сертификации (CA), которому
             доверяют для проверки подписанных сертификатов для аутентификации
             пользователя.

             Сертификаты могут кодировать ограничения доступа, аналогичные этим ключевым
             параметрам. Если присутствуют как ограничения сертификата, так и параметры
             ключа, применяется наиболее ограничительное объединение.

@item     command="command" @anchor{man_ssh_sshd_auth_file command="command"}
             Указывает, что команда выполняется всякий раз, когда этот ключ используется
             для аутентификации. Команда, предоставленная пользователем (если есть),
             игнорируется. Команда запускается на pty, если клиент запрашивает pty; в
             противном случае он запускается без tty. Если требуется 8-битный чистый канал,
             нельзя запрашивать pty или указывать no-pty. Цитата может быть включена в
             команду, заключив ее в обратный слеш. Эта опция может быть полезна для
             ограничения определенных открытых ключей для выполнения только определенной
             операции. Пример может быть ключом, который разрешает удаленное резервное
             копирование, но не более того. Обратите внимание, что клиент может указать
             пересылку TCP и/или X11, если они явно не запрещены. Команда, изначально
             предоставленная клиентом, доступна в переменной окружения
             SSH_ORIGINAL_COMMAND. Обратите внимание, что этот параметр применяется к
             выполнению оболочки, команды или подсистемы. Также обратите внимание, что эта
             команда может быть заменена либо директивой ForceCommand sshd_config(5), либо
             командой, встроенной в сертификат.

@item     environment="NAME=value" @anchor{man_ssh_sshd_auth_file environment="NAME=value"}
             Указывает, что строка должна быть добавлена ​​в среду при входе в систему с
             использованием этого ключа. Переменные среды, установленные таким образом,
             переопределяют другие значения среды по умолчанию. Допускается несколько
             вариантов этого типа. Обработка среды по умолчанию отключена и управляется с
             помощью опции PermitUserEnvironment. Эта опция автоматически отключается,
             если включен UseLogin.

@item     from="pattern-list" @anchor{man_ssh_sshd_auth_file from="pattern-list"}
             Указывает, что в дополнение к аутентификации с открытым ключом в списке
             шаблонов, разделенных запятыми, должно присутствовать либо каноническое имя
             удаленного хоста, либо его IP-адрес. Смотрите PATTERNS в ssh_config(5) для
             получения дополнительной информации о шаблонах.

             В дополнение к сопоставлению с подстановочными знаками, которое может
             применяться к именам хостов или адресам, раздел из from может сопоставлять
             адреса IP с использованием CIDR address/masklen нотации.

             Целью этой опции является необязательное повышение безопасности:
             аутентификация с открытым ключом сама по себе не доверяет сети или серверам
             имен или чему-либо (кроме ключа); однако, если кто-то как-то украл ключ, ключ
             позволяет злоумышленнику войти в систему из любой точки мира. Эта
             дополнительная опция делает использование украденного ключа более сложным
             (серверы имен и/или маршрутизаторы должны быть скомпрометированы в
             дополнение только к ключу).

@item     no-agent-forwarding @anchor{man_ssh_sshd_auth_file no-agent-forwarding}
             Запрещает переадресацию агента аутентификации, когда этот ключ используется
             для аутентификации.

@item     no-port-forwarding @anchor{man_ssh_sshd_auth_file no-port-forwarding}
             Запрещает пересылку TCP, когда этот ключ используется для аутентификации.
             Любые запросы клиента на переадресацию порта будут возвращать ошибку. Это
             может быть использовано, например, в связи с опцией команды.

@item     no-pty @anchor{man_ssh_sshd_auth_file no-pty}
             Предотвращает распределение tty (запрос на выделение pty не будет выполнен).

@item     no-user-rc @anchor{man_ssh_sshd_auth_file no-user-rc}
             Отключает выполнение ~/.ssh/rc.

@item     no-X11-forwarding @anchor{man_ssh_sshd_auth_file no-X11-forwarding}
             Запрещает пересылку X11, когда этот ключ используется для аутентификации.
             Любые запросы клиента X11 на пересылку возвращают ошибку.

@item     permitopen="host:port" @anchor{man_ssh_sshd_auth_file permitopen="host:port"}
             Ограничьте переадресацию локального порта с помощью ssh(1) -L, чтобы он
             мог подключаться только к указанному хосту и порту. Адреса IPv6 можно указать,
             заключив адрес в квадратные скобки. Можно использовать несколько вариантов
             разрешения, разделенных запятыми. Для указанных имен хостов не выполняется
             сопоставление шаблонов, они должны быть буквальными доменами или адресами.
             Спецификация порта * соответствует любому порту.

@item     port-forwarding @anchor{man_ssh_sshd_auth_file port-forwarding}
             Включить переадресацию портов, ранее отключенную ограничением

@item     principals="principals" @anchor{man_ssh_sshd_auth_file principals="principals"}
             В строке удостоверяющего центра указываются разрешенные участники для
             удостоверяющей аутентификации в виде списка через запятую. Для принятия
             сертификата в списке сертификатов должно быть указано хотя бы одно имя из
             списка. Эта опция игнорируется для ключей, которые не помечены как доверенные
             подписчики сертификатов при использовании опции cert-author.

@item     pty @anchor{man_ssh_sshd_auth_file pty}
             Разрешает распределение tty, ранее отключенное опцией restrict.

@item     restrict @anchor{man_ssh_sshd_auth_file restrict}
             Включите все ограничения, то есть отключите порт, агент и переадресацию X11,
             а также отключите распределение PTY и выполнение ~/.ssh/rc. Если какие-либо
             будущие возможности ограничения будут добавлены в файлы authorized_keys, они
             будут включены в этот набор.

@item     tunnel="n" @anchor{man_ssh_sshd_auth_file tunnel="n"}
             Принудительно подключите устройство tun(4) к серверу. Без этой опции будет
             использоваться следующее доступное устройство, если клиент
             запрашивает туннель.

@item     user-rc @anchor{man_ssh_sshd_auth_file user-rc}
             Включает выполнение ~/.ssh/rc, ранее отключенного опцией restrict.

@item     X11-forwarding @anchor{man_ssh_sshd_auth_file X11-forwarding}
             Разрешает переадресацию X11, ранее отключенную опцией restrict.
@end table
     Пример файла author_keys:
@display
        # Комментарии разрешены в начале строки
        ssh-rsa AAAAB3Nza...LiPk== user@@example.net
        from="*.sales.example.net,!pc.sales.example.net" ssh-rsa
        AAAAB2...19Q== john@@example.net
        command="dump /home",no-pty,no-port-forwarding ssh-dss
        AAAAC3...51R== example.net
        permitopen="192.0.2.1:80",permitopen="192.0.2.2:25" ssh-dss
        AAAAB5...21S==
        tunnel="0",command="sh /etc/netstart tun0" ssh-rsa AAAA...==
        jane@@example.net
        restrict,command="uptime" ssh-rsa AAAA1C8...32Tv==
        user@@example.net
        restrict,pty,command="nethack" ssh-rsa AAAA1f8...IrrC5==
        user@@example.net
@end display
@item SSH_KNOWN_HOSTS FILE FORMAT
     Файлы /etc/ssh/ssh_known_hosts и ~/.ssh/known_hosts содержат открытые ключи
     хостов для всех известных хостов. Глобальный файл должен быть подготовлен
     администратором (необязательно), а файл для каждого пользователя поддерживается
     автоматически: всякий раз, когда пользователь подключается с неизвестного хоста,
     его ключ добавляется в файл для каждого пользователя.

     Каждая строка в этих файлах содержит следующие поля: markers (optional),
     hostnames, bits, exponent, modulus, comment. Поля разделены пробелами.

     Маркер является необязательным, но если он присутствует, то он должен быть одним
     из “@@cert-authority”, чтобы указать, что строка содержит ключ центра сертификации
     (CA), или “@@revoked”, чтобы указать, что ключ, содержащийся в строке, отозван и
     не должен когда-либо быть принятым. В ключевой строке должен использоваться только
     один маркер.

     Имена хостов - это список шаблонов, разделенных запятыми (‘*’ и ‘?’ выступают в
     качестве подстановочных знаков); каждый шаблон в свою очередь сопоставляется с
     каноническим именем хоста (при аутентификации клиента) или с предоставленным
     пользователем именем (при аутентификации сервера). Образцу также может предшествовать
     ‘!’ для обозначения отрицания: если имя хоста соответствует отрицательному шаблону,
     оно не принимается (этой строкой), даже если оно соответствует другому шаблону в
     строке. Имя хоста или адрес могут быть заключены в квадратные скобки ‘[’ и ‘]’,
     за которыми следует ‘:’ и нестандартный номер порта.

     Альтернативно, имена хостов могут храниться в хешированной форме, которая скрывает
     имена хостов и адреса, если содержимое файла будет раскрыто. Хэшированные имена
     хостов начинаются с символа ‘|’. В одной строке может отображаться только одно
     хэшированное имя хоста, и ни один из указанных выше операторов отрицания или
     подстановочных знаков не может быть применен.

     Биты, экспонента и модуль берутся непосредственно из ключа хоста RSA; они могут быть
     получены, например, из /etc/ssh/ssh_host_key.pub. Необязательное поле комментария
     продолжается до конца строки и не используется.

     Строки, начинающиеся с ‘#’ и пустые строки, игнорируются как комментарии.

     При выполнении аутентификации хоста аутентификация принимается, если любая
     совпадающая строка имеет правильный ключ; либо тот, который точно соответствует,
     либо, если сервер предоставил сертификат для аутентификации, ключ центра сертификации,
     подписавшего сертификат. Чтобы ключ был доверенным как центр сертификации, он должен
     использовать маркер «@@ cert-author», описанный выше.

     Известный файл hosts также предоставляет возможность помечать ключи как отозванные,
     например, когда известно, что связанный закрытый ключ был украден. Отмененные ключи
     указываются с помощью маркера “@@revoked” в начале ключевой строки и никогда не
     принимаются для аутентификации или в качестве центра сертификации, но вместо этого
     выдают предупреждение от ssh(1) при их обнаружении.

     Допустимо (но не рекомендуется) иметь несколько строк или разных ключей хоста для
     одних и тех же имен. Это неизбежно произойдет, когда в файл будут помещены короткие
     формы имен хостов из разных доменов. Возможно, файлы содержат противоречивую
     информацию; Аутентификация принимается, если из любого файла можно найти
     достоверную информацию.

     Обратите внимание, что строки в этих файлах обычно состоят из сотен символов, и вы
     определенно не хотите вводить ключи хоста вручную. Скорее, сгенерируйте их с помощью
     сценария, ssh-keyscan(1) или взяв /etc/ssh/ssh_host_key.pub и добавив имена хостов
     впереди. ssh-keygen (1) также предлагает некоторое базовое автоматическое
     редактирование для ~/.ssh/known_hosts, включая удаление хостов, соответствующих
     имени хоста, и преобразование всех имен хостов в их хешированные представления.

     Пример ssh_known_hosts file:
@display
        # Комментарии разрешены в начале строки
        closenet,...,192.0.2.53 1024 37 159...93 closenet.example.net
        cvs.example.net,192.0.2.10 ssh-rsa AAAA1234.....=
        # Хешированное имя хоста
        |1|JfKTdBh7rNbXkVAQCRp4OQoPfmI=|USECr3SWf1JUPsms5AqfD5QfxkM= ssh-rsa
        AAAA1234.....=
        # Отмененный ключ
        @@revoked * ssh-rsa AAAAB5W...
        # Ключ CA, принятый для любого хоста в *.mydomain.com или *.mydomain.org
        @@cert-authority *.mydomain.org,*.mydomain.com ssh-rsa AAAAB5W...
@end display
@item FILES
@table @asis
@item ~/.hushlogin @anchor{man_ssh_sshd_file ~/.hushlogin}
             Этот файл используется для подавления печати времени последнего входа и
             /etc/motd, если включены PrintLastLog и PrintMotd соответственно. Не
             подавляет печать баннера, указанного Баннером.

@item     ~/.rhosts @anchor{man_ssh_sshd_file ~/.rhosts}
             Этот файл используется для аутентификации на основе хоста (см. ssh(1) для
             получения дополнительной информации). На некоторых машинах этот файл должен
             быть доступен для чтения всем, если домашний каталог пользователя находится в
             разделе NFS, потому что sshd читает его как root. Кроме того, этот файл должен
             принадлежать пользователю и не должен иметь права на запись для кого-либо еще.
             Рекомендуемое разрешение для большинства машин - чтение и запись для
             пользователя и недоступно для других.

@item     ~/.shosts @anchor{man_ssh_sshd_file ~/.shosts}
             Этот файл используется точно так же, как .rhosts, но разрешает
             аутентификацию на основе хоста без разрешения входа с помощью rlogin/rsh.

@item     ~/.ssh/ @anchor{man_ssh_sshd_file ~/.ssh/}
             Этот каталог является местоположением по умолчанию для всей пользовательской
             информации о конфигурации и аутентификации. Не существует общего требования
             хранить все содержимое этого каталога в секрете, но рекомендуемые разрешения
             для чтения/записи/выполнения для пользователя и недоступны для других.

@item     ~/.ssh/authorized_keys @anchor{man_ssh_sshd_file ~/.ssh/authorized_keys}
             Перечисляет открытые ключи (DSA, ECDSA, Ed25519, RSA), которые можно
             использовать для входа в систему от имени этого пользователя. Формат этого
             файла описан выше. Содержимое файла не очень чувствительно, но рекомендуемые
             разрешения для чтения и записи для пользователя и не доступны для других.

             Если этот файл, ~/.ssh directory или домашний каталог пользователя доступны
             для записи другим пользователям, то этот файл может быть изменен или заменен
             неавторизованными пользователями. В этом случае sshd не позволит использовать
             его, если для параметра StrictModes не установлено значение “no”.

@item     ~/.ssh/environment @anchor{man_ssh_sshd_file ~/.ssh/environment}
             Этот файл считывается в среду при входе в систему (если он существует). Он
             может содержать только пустые строки, строки комментариев (начинающиеся с ‘#’)
             и строки присваивания вида name=value. Файл должен быть доступен для записи
             только пользователю; это не должно быть доступно для чтения кем-либо еще.
             Обработка среды по умолчанию отключена и управляется с помощью опции
             PermitUserEnvironment.

@item     ~/.ssh/known_hosts @anchor{man_ssh_sshd_file ~/.ssh/known_hosts}
             Содержит список ключей хоста для всех хостов, в которые вошел пользователь,
             которых еще нет в общесистемном списке известных ключей хоста. Формат этого
             файла описан выше. Этот файл должен быть доступен для записи только
             пользователю root / владельца и может, но не обязательно, быть доступным
             для чтения всем.

@item     ~/.ssh/rc @anchor{man_ssh_sshd_file ~/.ssh/rc}
             Содержит процедуры инициализации, которые должны быть выполнены до того,
             как домашний каталог пользователя станет доступным. Этот файл должен быть
             доступен для записи только пользователю, и не должен быть доступен для
             чтения кем-либо еще.
@item /etc/hosts.allow  /etc/hosts.deny @anchor{man_ssh_sshd_file /etc/hosts.allow  /etc/hosts.deny}
             Элементы управления доступом, которые должны быть реализованы с помощью
             tcp-wrappers, определены здесь. Дальнейшие подробности описаны в
             hosts_access(5).

@item     /etc/hosts.equiv @anchor{man_ssh_sshd_file /etc/hosts.equiv}
             Этот файл предназначен для аутентификации на основе хоста (см. ssh(1)).
             Это должно быть доступно для записи только пользователю root.

@item     /etc/ssh/moduli @anchor{man_ssh_sshd_file /etc/ssh/moduli}
             Содержит группы Диффи-Хеллмана, используемые для метода обмена ключами
             "Diffie-Hellman Group Exchange". Формат файла описан в moduli(5). Если в
             этом файле не найдено пригодных для использования групп, будут использоваться
             фиксированные внутренние группы.

@item     /etc/motd @anchor{man_ssh_sshd_file /etc/motd}
             Смотри motd(5).

@item     /etc/nologin @anchor{man_ssh_sshd_file /etc/nologin}
             Если этот файл существует, sshd не разрешает входить кому-либо, кроме
             пользователя root. Содержимое этого файла отображается всем, кто пытается
             войти в систему, и соединения без полномочий root отклоняются. Файл должен
             быть доступен для чтения всем.

@item     /etc/ssh/shosts.equiv @anchor{man_ssh_sshd_file /etc/ssh/shosts.equiv}
             Этот файл используется точно так же, как hosts.equiv, но допускает
             аутентификацию на основе хоста без разрешения входа с помощью rlogin/rsh.
@item        Приватные части ключей хоста @anchor{man_ssh_sshd_file Приватные части ключей хоста} 
@display
             /etc/ssh/ssh_host_key
             /etc/ssh/ssh_host_dsa_key
             /etc/ssh/ssh_host_ecdsa_key
             /etc/ssh/ssh_host_ed25519_key
             /etc/ssh/ssh_host_rsa_key 
@end display
             Эти файлы содержат приватные части ключей хоста. Эти файлы должны принадлежать
             только пользователю root, быть доступными для чтения только пользователю root
             и недоступны для других. Обратите внимание, что sshd не запускается, если эти
             файлы являются group/world-accessible.
@item   Открытые части ключей хоста @anchor{man_ssh_sshd_file Открытые части ключей хоста}
@display
             /etc/ssh/ssh_host_key.pub
             /etc/ssh/ssh_host_dsa_key.pub
             /etc/ssh/ssh_host_ecdsa_key.pub
             /etc/ssh/ssh_host_ed25519_key.pub
             /etc/ssh/ssh_host_rsa_key.pub
@end display
             Эти файлы содержат открытые части ключей хоста. Эти файлы должны быть
             доступны для чтения всем пользователям, но доступны для записи только
             пользователю root. Их содержимое должно соответствовать соответствующим
             частным частям. Эти файлы на самом деле не используются ни для чего; они
             предоставляются для удобства пользователя, поэтому их содержимое можно
             скопировать в известные файлы хостов. Эти файлы создаются с использованием
             ssh-keygen(1).

@item     /etc/ssh/ssh_known_hosts @anchor{man_ssh_sshd_file /etc/ssh/ssh_known_hosts}
             Общесистемный список известных ключей хоста. Этот файл должен быть
             подготовлен системным администратором, чтобы он содержал открытые ключи
             хостов всех компьютеров в организации. Формат этого файла описан выше. Этот
             файл должен быть доступен для записи только пользователю root/владельца и
             должен быть доступен для чтения всем пользователям.

@item     /etc/ssh/sshd_config @anchor{man_ssh_sshd_file /etc/ssh/sshd_config}
             Содержит данные конфигурации для sshd. Формат файла и параметры конфигурации
             описаны в sshd_config(5).

@item     /etc/ssh/sshrc @anchor{man_ssh_sshd_file /etc/ssh/sshrc}
             Подобно ~/.ssh/rc, его можно использовать для глобальной инициализации
             времени входа в систему для конкретного компьютера. Этот файл должен быть
             доступен для записи только пользователю root и должен быть доступен для
             чтения всем.

@item     /var/run/sshd @anchor{man_ssh_sshd_file /var/run/sshd}
             Каталог chroot(2), используемый sshd во время разделения привилегий на
             этапе предварительной аутентификации. Каталог не должен содержать никаких
             файлов и должен принадлежать пользователю root, без групповой доступности
             для записи.

@item     /var/run/sshd.pid @anchor{man_ssh_sshd_file /var/run/sshd.pid}
             Содержит идентификатор процесса sshd, который прослушивает соединения (если
             несколько демонов запущены одновременно для разных портов, он содержит
             идентификатор процесса, запущенного последним). Содержимое этого файла не
             является конфиденциальным; это может быть читаемым во всем мире.
@end table
@item SEE ALSO
     scp(1), sftp(1), ssh(1), ssh-add(1), ssh-agent(1), ssh-keygen(1),
     ssh-keyscan(1), chroot(2), hosts_access(5), moduli(5), sshd_config(5),
     inetd(8), sftp-server(8)

@item AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by
     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
     de Raadt and Dug Song removed many bugs, re-added newer features and cre‐
     ated OpenSSH.  Markus Friedl contributed the support for SSH protocol
     versions 1.5 and 2.0.  Niels Provos and Markus Friedl contributed support
     for privilege separation.

BSD                            February 17, 2016                           BSD
@end table
