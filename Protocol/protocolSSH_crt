This document describes a simple public-key certificate authentication
system for use by SSH.

Background
----------

The SSH protocol currently supports a simple public key authentication
mechanism. Unlike other public key implementations, SSH eschews the use
of X.509 certificates and uses raw keys. This approach has some benefits
relating to simplicity of configuration and minimisation of attack
surface, but it does not support the important use-cases of centrally
managed, passwordless authentication and centrally certified host keys.

These protocol extensions build on the simple public key authentication
system already in SSH to allow certificate-based authentication. The
certificates used are not traditional X.509 certificates, with numerous
options and complex encoding rules, but something rather more minimal: a
key, some identity information and usage options that have been signed
with some other trusted key.

A sshd server may be configured to allow authentication via certified
keys, by extending the existing ~/.ssh/authorized_keys mechanism to
allow specification of certification authority keys in addition to
raw user keys. The ssh client will support automatic verification of
acceptance of certified host keys, by adding a similar ability to
specify CA keys in ~/.ssh/known_hosts.

All certificate types include certification information along with the
public key that is used to sign challenges. In OpenSSH, ssh-keygen
performs the CA signing operation.

Certified keys are represented using new key types:

    ssh-rsa-cert-v01@openssh.com
    ssh-dss-cert-v01@openssh.com
    ecdsa-sha2-nistp256-cert-v01@openssh.com
    ecdsa-sha2-nistp384-cert-v01@openssh.com
    ecdsa-sha2-nistp521-cert-v01@openssh.com
    ssh-ed25519-cert-v01@openssh.com

Two additional types exist for RSA certificates to force use of
SHA-2 signatures (SHA-256 and SHA-512 respectively):

    rsa-sha2-256-cert-v01@openssh.com
    rsa-sha2-512-cert-v01@openssh.com

These RSA/SHA-2 types should not appear in keys at rest or transmitted
on their wire, but do appear in a SSH_MSG_KEXINIT's host-key algorithms
field or in the "public key algorithm name" field of a "publickey"
SSH_USERAUTH_REQUEST to indicate that the signature will use the
specified algorithm.

Protocol extensions
-------------------

The SSH wire protocol includes several extensibility mechanisms.
These modifications shall take advantage of namespaced public key
algorithm names to add support for certificate authentication without
breaking the protocol - implementations that do not support the
extensions will simply ignore them.

Authentication using the new key formats described below proceeds
using the existing SSH "publickey" authentication method described
in RFC4252 section 7.

New public key formats
----------------------

The certificate key types take a similar high-level format (note: data
types and encoding are as per RFC4251 section 5). The serialised wire
encoding of these certificates is also used for storing them on disk.

#define SSH_CERT_TYPE_USER    1
#define SSH_CERT_TYPE_HOST    2

RSA certificate

    string    "ssh-rsa-cert-v01@openssh.com"
    string    nonce
    mpint     e
    mpint     n
    uint64    serial
    uint32    type
    string    key id
    string    valid principals
    uint64    valid after
    uint64    valid before
    string    critical options
    string    extensions
    string    reserved
    string    signature key
    string    signature

DSA certificate

    string    "ssh-dss-cert-v01@openssh.com"
    string    nonce
    mpint     p
    mpint     q
    mpint     g
    mpint     y
    uint64    serial
    uint32    type
    string    key id
    string    valid principals
    uint64    valid after
    uint64    valid before
    string    critical options
    string    extensions
    string    reserved
    string    signature key
    string    signature

ECDSA certificate

    string    "ecdsa-sha2-nistp256-cert-v01@openssh.com" |
              "ecdsa-sha2-nistp384-cert-v01@openssh.com" |
              "ecdsa-sha2-nistp521-cert-v01@openssh.com"
    string    nonce
    string    curve
    string    public_key
    uint64    serial
    uint32    type
    string    key id
    string    valid principals
    uint64    valid after
    uint64    valid before
    string    critical options
    string    extensions
    string    reserved
    string    signature key
    string    signature

ED25519 certificate

    string    "ssh-ed25519-cert-v01@openssh.com"
    string    nonce
    string    pk
    uint64    serial
    uint32    type
    string    key id
    string    valid principals
    uint64    valid after
    uint64    valid before
    string    critical options
    string    extensions
    string    reserved
    string    signature key
    string    signature

The nonce field is a CA-provided random bitstring of arbitrary length
(but typically 16 or 32 bytes) included to make attacks that depend on
inducing collisions in the signature hash infeasible.

e and n are the RSA exponent and public modulus respectively.

p, q, g, y are the DSA parameters as described in FIPS-186-2.

curve and public key are respectively the ECDSA "[identifier]" and "Q"
defined in section 3.1 of RFC5656.

pk is the encoded Ed25519 public key as defined by
draft-josefsson-eddsa-ed25519-03.

serial is an optional certificate serial number set by the CA to
provide an abbreviated way to refer to certificates from that CA.
If a CA does not wish to number its certificates it must set this
field to zero.

type specifies whether this certificate is for identification of a user
or a host using a SSH_CERT_TYPE_... value.

key id is a free-form text field that is filled in by the CA at the time
of signing; the intention is that the contents of this field are used to
identify the identity principal in log messages.

"valid principals" is a string containing zero or more principals as
strings packed inside it. These principals list the names for which this
certificate is valid; hostnames for SSH_CERT_TYPE_HOST certificates and
usernames for SSH_CERT_TYPE_USER certificates. As a special case, a
zero-length "valid principals" field means the certificate is valid for
any principal of the specified type.

"valid after" and "valid before" specify a validity period for the
certificate. Each represents a time in seconds since 1970-01-01
00:00:00. A certificate is considered valid if:

    valid after <= current time < valid before

critical options is a set of zero or more key options encoded as
below. All such options are "critical" in the sense that an implementation
must refuse to authorise a key that has an unrecognised option.

extensions is a set of zero or more optional extensions. These extensions
are not critical, and an implementation that encounters one that it does
not recognise may safely ignore it.

Generally, critical options are used to control features that restrict
access where extensions are used to enable features that grant access.
This ensures that certificates containing unknown restrictions do not
inadvertently grant access while allowing new protocol features to be
enabled via extensions without breaking certificates' backwards
compatibility.

The reserved field is currently unused and is ignored in this version of
the protocol.

The signature key field contains the CA key used to sign the
certificate. The valid key types for CA keys are ssh-rsa,
ssh-dss, ssh-ed25519 and the ECDSA types ecdsa-sha2-nistp256,
ecdsa-sha2-nistp384, ecdsa-sha2-nistp521. "Chained" certificates, where
the signature key type is a certificate type itself are NOT supported.
Note that it is possible for a RSA certificate key to be signed by a
Ed25519 or ECDSA CA key and vice-versa.

signature is computed over all preceding fields from the initial string
up to, and including the signature key. Signatures are computed and
encoded according to the rules defined for the CA's public key algorithm
(RFC4253 section 6.6 for ssh-rsa and ssh-dss, RFC5656 for the ECDSA
types), and draft-josefsson-eddsa-ed25519-03 for Ed25519.

Critical options
----------------

The critical options section of the certificate specifies zero or more
options on the certificates validity. The format of this field
is a sequence of zero or more tuples:

    string       name
    string       data

Options must be lexically ordered by "name" if they appear in the
sequence. Each named option may only appear once in a certificate.

The name field identifies the option and the data field encodes
option-specific information (see below). All options are
"critical", if an implementation does not recognise a option
then the validating party should refuse to accept the certificate.

Custom options should append the originating author or organisation's
domain name to the option name, e.g. "my-option@example.com".

No critical options are defined for host certificates at present. The
supported user certificate options and the contents and structure of
their data fields are:

Name                    Format        Description
-----------------------------------------------------------------------------
force-command           string        Specifies a command that is executed
                                      (replacing any the user specified on the
                                      ssh command-line) whenever this key is
                                      used for authentication.

source-address          string        Comma-separated list of source addresses
                                      from which this certificate is accepted
                                      for authentication. Addresses are
                                      specified in CIDR format (nn.nn.nn.nn/nn
                                      or hhhh::hhhh/nn).
                                      If this option is not present then
                                      certificates may be presented from any
                                      source address.

Extensions
----------

The extensions section of the certificate specifies zero or more
non-critical certificate extensions. The encoding and ordering of
extensions in this field is identical to that of the critical options,
as is the requirement that each name appear only once.

If an implementation does not recognise an extension, then it should
ignore it.

Custom options should append the originating author or organisation's
domain name to the option name, e.g. "my-option@example.com".

No extensions are defined for host certificates at present. The
supported user certificate extensions and the contents and structure of
their data fields are:

Name                    Format        Description
-----------------------------------------------------------------------------
no-presence-required    empty         Flag indicating that signatures made
                                      with this certificate need not assert
                                      user presence. This option only make
                                      sense for the U2F/FIDO security key
                                      types that support this feature in
                                      their signature formats.

permit-X11-forwarding   empty         Flag indicating that X11 forwarding
                                      should be permitted. X11 forwarding will
                                      be refused if this option is absent.

permit-agent-forwarding empty         Flag indicating that agent forwarding
                                      should be allowed. Agent forwarding
                                      must not be permitted unless this
                                      option is present.

permit-port-forwarding  empty         Flag indicating that port-forwarding
                                      should be allowed. If this option is
                                      not present then no port forwarding will
                                      be allowed.

permit-pty              empty         Flag indicating that PTY allocation
                                      should be permitted. In the absence of
                                      this option PTY allocation will be
                                      disabled.

permit-user-rc          empty         Flag indicating that execution of
                                      ~/.ssh/rc should be permitted. Execution
                                      of this script will not be permitted if
                                      this option is not present.

$OpenBSD: PROTOCOL.certkeys,v 1.17 2019/11/25 00:57:51 djm Exp $
**************************************************************************
Этот документ описывает простую аутентификацию сертификата с открытым ключом
система для использования по SSH.

Фон
----------

Протокол SSH в настоящее время поддерживает простую аутентификацию с открытым ключом
механизм. В отличие от других реализаций открытых ключей, SSH избегает использования
сертификатов X.509 и использует сырые ключи. Этот подход имеет некоторые преимущества
относительно простоты настройки и минимизации атаки
поверхность, но она не поддерживает важные сценарии использования централизованно
управляемая аутентификация без пароля и централизованно сертифицированные ключи хоста.

Эти расширения протокола основаны на простой аутентификации с открытым ключом
Система уже в SSH, чтобы разрешить аутентификацию на основе сертификатов. 
используемые сертификаты не являются традиционными сертификатами X.509, с многочисленными
опции и сложные правила кодирования, но что-то более минимальное:
ключ, некоторая идентификационная информация и варианты использования, которые были подписаны
с другим доверенным ключом.

Сервер sshd может быть настроен для разрешения аутентификации через сертифицированный
ключи, расширяя существующий механизм ~ / .ssh / authorized_keys до
разрешить спецификацию ключей центра сертификации в дополнение к
сырые пользовательские ключи. Клиент ssh будет поддерживать автоматическую проверку
принятие сертифицированных ключей хоста, добавив аналогичную возможность
укажите ключи CA в ~ / .ssh / known_hosts.

Все типы сертификатов включают информацию о сертификации вместе с
открытый ключ, который используется для подписания вызовов. В OpenSSH, ssh-keygen
выполняет операцию подписания CA

Сертифицированные ключи представлены с использованием новых типов ключей:

    ssh-rsa-cert-v01@openssh.com
    ssh-dss-cert-v01@openssh.com
    ecdsa-sha2-nistp256-cert-v01@openssh.com
    ecdsa-sha2-nistp384-cert-v01@openssh.com
    ecdsa-sha2-nistp521-cert-v01@openssh.com
    ssh-ed25519-cert-v01@openssh.com

Существуют два дополнительных типа сертификатов RSA для принудительного использования
Подписи SHA-2 (SHA-256 и SHA-512 соответственно):

    rsa-sha2-256-cert-v01@openssh.com
    rsa-sha2-512-cert-v01@openssh.com

Эти типы RSA / SHA-2 не должны появляться в ключах в состоянии покоя или передаваемых
на их провод, но появляются в алгоритмах ключа хоста SSH_MSG_KEXINIT
поле или в поле «имя алгоритма открытого ключа» «открытого ключа»
SSH_USERAUTH_REQUEST, чтобы указать, что подпись будет использовать
указанный алгоритм.

Расширения протокола
-------------------

Проводной протокол SSH включает несколько механизмов расширения.
Эти изменения должны использовать открытый ключ пространства имен
имена алгоритмов для добавления поддержки аутентификации сертификатов без
нарушение протокола - реализации, которые не поддерживают
расширения будут просто игнорировать их.

Идентификация с использованием новых форматов ключей, описанных ниже, продолжается
используя существующий метод аутентификации SSH "publickey", описанный
в RFC4252 раздел 7.

Новые форматы открытых ключей
----------------------

Типы ключей сертификатов имеют похожий формат высокого уровня (примечание: данные
Типы и кодировка в соответствии с RFC4251 раздел 5). Сериализованный провод
Кодировка этих сертификатов также используется для их хранения на диске.

#define SSH_CERT_TYPE_USER 1
#define SSH_CERT_TYPE_HOST 2

Сертификат RSA

    строка "ssh-rsa-cert-v01@openssh.com"
    строка nonce
    mpint e
    mpint n
    серийный uint64
    тип uint32
    идентификатор строки
    строка действительных принципалов
    uint64 действует после
    Uint64 действует до
    критические параметры строки
    расширения строки
    зарезервированная строка
    ключ подписи строки
    подпись строки

Сертификат DSA

    строка "ssh-dss-cert-v01@openssh.com"
    строка nonce
    mpint p
    mpint q
    mpint g
    mpint y
    серийный uint64
    тип uint32
    идентификатор строки
    строка действительных принципалов
    uint64 действует после
    Uint64 действует до
    критические параметры строки
    расширения строки
    зарезервированная строка
    ключ подписи строки
    подпись строки

Сертификат ECDSA

    строка "ecdsa-sha2-nistp256-cert-v01@openssh.com" |
              "ecdsa-sha2-nistp384-cert-v01@openssh.com" |
              "Ecdsa-sha2-nistp521-cert-v01@openssh.com"
    строка nonce
    струнная кривая
    строка public_key
    серийный uint64
    тип uint32
    идентификатор строки
    строка действительных принципалов
    uint64 действует после
    Uint64 действует до
    критические параметры строки
    расширения строки
    зарезервированная строка
    ключ подписи строки
    подпись строки

Сертификат ED25519

    строка "ssh-ed25519-cert-v01@openssh.com"
    строка nonce
    строка рк
    серийный uint64
    тип uint32
    идентификатор строки
    строка действительных принципалов
    uint64 действует после
    Uint64 действует до
    критические параметры строки
    расширения строки
    зарезервированная строка
    ключ подписи строки
    подпись строки

Поле nonce является предоставленной CA случайной цепочкой битов произвольной длины
(но обычно 16 или 32 байта) включены для проведения атак, которые зависят от
вызывать коллизии в хеше подписи невозможно.

e и n - показатель RSA и модуль публичности соответственно.

p, q, g, y - параметры DSA, как описано в FIPS-186-2.

кривая и открытый ключ - это соответственно ECDSA "[идентификатор]" и "Q"
определено в разделе 3.1 RFC5656.

pk - закодированный открытый ключ Ed25519, как определено
проект-Josefsson-eddsa-ed25519-03.

serial - это необязательный серийный номер сертификата, установленный CA для
предоставить сокращенный способ ссылки на сертификаты от этого CA.
Если ЦС не желает нумеровать свои сертификаты, он должен установить это
поле в ноль.

Тип указывает, предназначен ли этот сертификат для идентификации пользователя.
или хост, использующий значение SSH_CERT_TYPE _...

идентификатор ключа - это текстовое поле произвольной формы, которое заполняется ЦС в то время
подписания; предполагается, что содержимое этого поля используется для
идентифицировать субъект идентификации в сообщениях журнала.

«Действительные принципалы» - это строка, содержащая ноль или более принципалов как
струны упакованы внутри. Эти принципалы перечисляют имена, для которых это
сертификат действителен; имена хостов для сертификатов SSH_CERT_TYPE_HOST и
имена пользователей для сертификатов SSH_CERT_TYPE_USER. Как особый случай,
Поле «действительные принципалы» нулевой длины означает, что сертификат действителен для
любой принципал указанного типа.

«Действителен после» и «Действителен до» указывает срок действия для
сертификат. Каждый представляет время в секундах с 1970-01-01
00:00:00. Сертификат считается действительным, если:

    действует после <= текущего времени <действует до

Критические параметры - это набор из нуля или более ключевых параметров, закодированных как
ниже. Все такие варианты являются «критическими» в том смысле, что реализация
должен отказаться авторизовать ключ с нераспознанным параметром.

extensions - это набор из нуля или более необязательных расширений. Эти расширения
не являются критическими, и реализация, которая сталкивается с той, что она делает
не признавать можно смело игнорировать.

Как правило, критические параметры используются для управления функциями, которые ограничивают
доступ, где расширения используются для включения функций, которые предоставляют доступ.
Это гарантирует, что сертификаты, содержащие неизвестные ограничения, не
непреднамеренно предоставить доступ, позволяя новым функциям протокола быть
включается через расширения без взлома сертификатов в обратном направлении
совместимость.

Зарезервированное поле в настоящее время не используется и игнорируется в этой версии
протокол.

Поле ключа подписи содержит ключ CA, используемый для подписи
сертификат. Допустимые типы ключей для ключей CA: ssh-rsa,
ssh-dss, ssh-ed25519 и типы ECDSA ecdsa-sha2-nistp256,
ecdsa-sha2-nistp384, ecdsa-sha2-nistp521. «Цепные» сертификаты, где
тип ключа подписи сам по себе является типом сертификата, НЕ поддерживаются.
Обратите внимание, что ключ сертификата RSA может быть подписан
Ed25519 или ECDSA CA ключ и наоборот.

подпись вычисляется по всем предшествующим полям из исходной строки
до, включая ключ подписи. Подписи вычисляются и
кодируется в соответствии с правилами, определенными для алгоритма открытого ключа ЦС
(RFC4253 раздел 6.6 для ssh-rsa и ssh-dss, RFC5656 для ECDSA
типов) и draft-josefsson-eddsa-ed25519-03 для Ed25519.

Критические варианты
----------------

Раздел критических параметров сертификата указывает ноль или более
варианты действия сертификатов. Формат этого поля
последовательность из нуля или более кортежей:

    имя строки
    строковые данные

Параметры должны быть упорядочены по имени, если они появляются в
последовательность. Каждая именованная опция может появиться в сертификате только один раз.

Поле имени идентифицирует опцию, а поле данных кодирует
информация о конкретном варианте (см. ниже). Все варианты
«критический», если реализация не распознает опцию
затем проверяющая сторона должна отказаться принять сертификат.

Пользовательские параметры должны добавлять автора или организации
доменное имя с именем опции, например, «my-option@example.com».

В настоящее время не определены критические параметры для сертификатов хоста. 
поддерживаемые параметры сертификата пользователя, а также содержание и структура
их поля данных:

Название Формат Описание
-------------------------------------------------- ---------------------------
Строка Force-Command Указывает команду, которая выполняется
                                      (замена любого пользователя, указанного на
                                      SSH командной строки) всякий раз, когда этот ключ
                                      используется для аутентификации.

строка адреса источника Список разделенных запятыми адресов источника
                                      от которого этот сертификат принят
                                      для аутентификации. Адреса
                                      указывается в формате CIDR (nn.nn.nn.nn / nn
                                      или хххх :: хххх / нн).
                                      Если этой опции нет, тогда
                                      сертификаты могут быть представлены от любого
                                      адрес источника.

расширения
----------

Раздел расширений сертификата указывает ноль или более
некритические расширения сертификатов. Кодирование и упорядочение
расширения в этой области идентичны расширению критических параметров,
как и требование, чтобы каждое имя появлялось только один раз.

Если реализация не распознает расширение, то оно должно
игнорируй это.

Пользовательские параметры должны добавлять автора или организации
доменное имя с именем опции, например, «my-option@example.com».

В настоящее время расширения для сертификатов хоста не определены. 
поддерживаемые расширения пользовательских сертификатов, а также содержание и структура
их поля данных:

Название Формат Описание
-------------------------------------------------- ---------------------------
пустой флаг, указывающий, что подписи сделаны
                                      с этим сертификатом не нужно утверждать
                                      присутствие пользователя. Эта опция только делает
                                      смысл для ключа безопасности U2F / FIDO
                                      типы, которые поддерживают эту функцию в
                                      их форматы подписи.

allow-X11-forwarding пустой Флаг, указывающий, что X11 forwarding
                                      должно быть разрешено X11 переадресация будет
                                      будет отказано, если эта опция отсутствует.

allow-agent-forwarding empty Флаг, указывающий, что переадресация агента
                                      должно быть разрешено. Агент переадресация
                                      не должно быть разрешено, если это
                                      вариант присутствует.

allow-port-forwarding пустой Флаг, указывающий, что переадресация портов
                                      должно быть разрешено. Если эта опция
                                      нет, то переадресация портов не будет
                                      разрешено.

allow-pty empty Флаг, указывающий, что распределение PTY
                                      должно быть разрешено В отсутствие
                                      эта опция PTY будет выделена
                                      отключен.

allow-user-rc empty Флаг, указывающий, что выполнение
                                      ~ / .ssh / rc должно быть разрешено. выполнение
                                      этот скрипт не будет разрешен, если
                                      этой опции нет.

$ OpenBSD: PROTOCOL.certkeys, v 1.17 2019/11/25 00:57:51 djm Exp $